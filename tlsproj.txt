Parters: cs161-cr; cs161-hs.

1.	The attacker is able to alter the type a client sent to server so that the server will denial further services. For example, when a client trying to send Hello_message to server, the attacker can change its type to Cert_message (or simply an Error_message) and the server will automatically stop servicing.

On the other hand, the attacker can change message sent to client: for example change the Hello_message to Error_message.

2.	The random_int() function always choses the first random value generated by the system time. Therefore, the two random values we used (random value in client_hello and premaster_secret) are the same. By simply read random values in client_hello and server_hello, attacker could be able to infer the premaster secret and using the same hash method to get the exactly same master secret. Hence, the TLS is very easy to break.

3.	Since the cipher suite information is sent within hello message, it is not encrypted. A man in the middle can simply drop the hello_message sent from client or server and client/ server will change with the weakest cipher suite. One possible way to fix it is that we can send the cipher suite information encrypted. For example, TLS could be modified to send cipher suite information after both client and server got certificate from each other, along with the premaster secret/master secret. As these values are encrypted using RSA, attacks will be highly impossible.

4.  
	I. One possible attack is attacker perform a man in the middle attack during the certificate exchange. Attacker receive the certificate packet sent by client and drop it; then attacker send another packet contains his own certificate to server. And repeat the attack when server send certificate to client. By doing this, server will send master secret encrypt in attacker’s public key and attacker can easily decrypt the master secret. Lastly, attacker will wrap the master secret with client’s public key and send back to client. From now on, attacker can easily decrypt any messages sent by client or server.

	Fix: During the certificate exchange, client/ server could sign the certificate using CA's public key and send it to server/ client. 

	II: Since we didn't check certificate's expiration date or domain name in the handshake, it will be easy for attacker to use an expired certificate and perferm attack. For example, the server register a valid certificate from CA and waiting for it expired. Then server do malicious things by blocking messages send by server and pretend to be server itself. As client doesn't check expiration date, malicious server can easily send its certificate to client and pretent to be server.

	Fix: Add a now function call to check the certificate expiraion date.

	III: Since the premaster secret is only 4 bytes. An attacker can use brute force to break the premaster secret easily. 
	By copy a massage packet and try decrypting it. Attacker would be able to know wehter the premaster key he generated is right or wrong.

	Fix: Use a longer premaster secret. For example: 48 bytes.

	IV: By simply add an extra message to server or client, the server or client will stop service because of the wrong type 		received. 

		Fix: instead of stop service after receiving a wrong message, server/ client should wait for a short amount of time for the real message come out.

	VI: DDOS: Generate as many fake clients as possible and establish hand shake with server, the server will crash either 		 	 because of the limited internet bandwidth, or limited disk space (used to store all the connections).

		Fix: Build the server with larger bandwidth and using a larger disk.


